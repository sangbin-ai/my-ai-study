import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # 파이썬 리스트를 넘파이 배열(행렬)로 바꿔서, 행/열 연산을 빠르게 하기 위함
print("전체 배열:\n", arr) # 위 표 그대로 출력
print("차원(dimension):", arr.ndim) #차원 수. 행과 열이 있으니 2차원(2D), 1차원은 [1, 2, 3], 2차원은 표, 3차원은 표가 겹겹히 쌓인 큐브 느낌
print("형태(shape):", arr.shape) #모양(행.열).3행 3열이라는 뜻, 실무에서 데이터 크기 확인에 매우 자주 볼 듯?print("첫 번째 행:", arr[0])
print("마지막 열:", arr[:, 2]) #arr[0] >> [1, 2, 3]: 0번 행(첫 번째 행) 전체, 규칙:arr[행 인덱스, 열 인덱스]인데, 열을 생략하면 그 행 전체
print("가운데 2x2 부분:\n", arr[0:2, 1:3]) #행은 0~2까지 열은 1~3까지 즉, [행0행1, 열1열2] >> [행0, 열1,2], [행1, 열1,2]
print("행 기준 합계:", arr.sum(axis=1)) #행 기준 합계(axis=1 가로 방향), 각각 1+2+3=6,4+5+6=15, 7+8+9=24
print("열 기준 평균:", arr.mean(axis=0)) #열 기준 평균(axis=0은 세로 방향), 열0:(1+4+7)/3=4, 열1:(2+5+8)/3=5, 열2:(3+6+9)/3=6